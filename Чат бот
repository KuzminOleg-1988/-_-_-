
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# Инициализация логирования
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# Пример данных о продажах
sales_data = []

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("Внести данные о продаже", callback_data='add_sale')],
        [InlineKeyboardButton("Получить отчет о продажах за период", callback_data='get_report')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Выберите действие:", reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'add_sale':
        await query.edit_message_text("Введите данные о продаже в формате: название, сумма, дата (DD-MM-YYYY)")
        context.user_data['mode'] = 'add_sale'  # Устанавливаем режим на добавление продажи
    elif query.data == 'get_report':
        await query.edit_message_text("Введите диапазон для отчета в формате: DD-MM-YYYY, DD-MM-YYYY")
        context.user_data['mode'] = 'get_report'  # Устанавливаем режим на получение отчета

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text

    # Проверка режима
    if 'mode' not in context.user_data:
        await update.message.reply_text("Сначала выберите действие через /start.")
        return

    # Режим добавления данных о продаже
    if context.user_data['mode'] == 'add_sale':
        try:
            # Разбираем текст на компоненты
            name, amount, date = map(str.strip, text.split(','))
            sales_data.append({'name': name, 'amount': float(amount), 'date': date})
            await update.message.reply_text("Запись о продаже успешно добавлена.")
        except Exception as e:
            await update.message.reply_text("Ошибка при добавлении продажи. Пожалуйста, используйте формат: 'название, сумма, дата (DD-MM-YYYY)'.")
            logging.error(f"Ошибка при добавлении записи: {e}")

    # Режим получения отчета
    elif context.user_data['mode'] == 'get_report':
        try:
            date_parts = list(map(str.strip, text.split(',')))
            # Проверка на количество введённых дат
            if len(date_parts) != 2:
                await update.message.reply_text("Пожалуйста, введите два периода дат через запятую (например, '01-01-2023, 31-01-2023').")
                return

            start_date_str, end_date_str = date_parts
            # Преобразуем строки в объекты даты
            start_date = datetime.strptime(start_date_str, '%d-%m-%Y')
            end_date = datetime.strptime(end_date_str, '%d-%m-%Y')

            # Фильтруем записи продаж согласно введенному периоду
            filtered_sales = [
                sale for sale in sales_data
                if start_date <= datetime.strptime(sale['date'], '%d-%m-%Y') <= end_date
            ]

            if filtered_sales:
                sales_report = "\n".join([f"{sale['name']} - {sale['amount']} - {sale['date']}" for sale in filtered_sales])
                await update.message.reply_text(f"Данные о продажах за период:\n{sales_report}")
            else:
                await update.message.reply_text("Нет записей о продажах за данный период.")
        except Exception as e:
            await update.message.reply_text("Ошибка при обработке периода. Убедитесь, что даты указаны правильно.")
            logging.error(f"Ошибка при получении торговых данных: {e}")

def main():
    token = '8048335958:AAHQVDUFJRf45xCEIfpVauhDnWuN_Tmyk3M'  # Замените на ваш реальный токен
    application = ApplicationBuilder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()

if __name__ == '__main__':
    main()
